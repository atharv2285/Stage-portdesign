import { useState } from "react";
import { Code2, Brain, Database, Server, TrendingUp, Plus, X, Edit2, Check } from "lucide-react";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";

interface SkillNode {
  id: string;
  name: string;
  completed: boolean;
  projects?: string[];
  courses?: string[];
  children?: SkillNode[];
}

interface SkillTreeCategory {
  id: string;
  name: string;
  icon: typeof Code2;
  color: string;
  tree: SkillNode;
  isCustom?: boolean;
}

const defaultCategories: SkillTreeCategory[] = [
  {
    id: "webdev",
    name: "Web Development",
    icon: Code2,
    color: "from-blue-500 to-cyan-500",
    tree: {
      id: "html-css",
      name: "HTML & CSS",
      completed: true,
      projects: ["Portfolio Website", "Landing Pages"],
      courses: ["HTML/CSS Fundamentals"],
      children: [
        {
          id: "js",
          name: "JavaScript",
          completed: true,
          projects: ["Interactive Forms", "DOM Manipulation"],
          courses: ["JavaScript Essentials", "ES6+ Features"],
          children: [
            { 
              id: "react", 
              name: "React", 
              completed: true,
              projects: ["E-commerce Platform", "Dashboard App"],
              courses: ["React Complete Guide"]
            },
            { 
              id: "vue", 
              name: "Vue", 
              completed: false,
              courses: ["Vue.js Fundamentals"]
            },
            { 
              id: "angular", 
              name: "Angular", 
              completed: false,
              courses: ["Angular Tutorial"]
            },
          ],
        },
        {
          id: "ts",
          name: "TypeScript",
          completed: true,
          projects: ["API Services", "Full-stack Apps"],
          courses: ["TypeScript Deep Dive"],
          children: [
            { 
              id: "nextjs", 
              name: "Next.js", 
              completed: true,
              projects: ["Marketing Sites", "SaaS Products"],
              courses: ["Next.js 14 Course"]
            },
            { 
              id: "remix", 
              name: "Remix", 
              completed: false,
              courses: ["Remix Tutorial"]
            },
          ],
        },
      ],
    },
  },
  {
    id: "aiml",
    name: "AI & ML",
    icon: Brain,
    color: "from-purple-500 to-pink-500",
    tree: {
      id: "python",
      name: "Python",
      completed: true,
      projects: ["Data Analysis", "Automation Scripts"],
      courses: ["Python for Beginners"],
      children: [
        {
          id: "ml-basics",
          name: "ML Basics",
          completed: true,
          projects: ["Prediction Models"],
          courses: ["Machine Learning A-Z"],
          children: [
            { 
              id: "tensorflow", 
              name: "TensorFlow", 
              completed: true,
              projects: ["Image Classification"],
              courses: ["TensorFlow Developer Certificate"]
            },
            { 
              id: "pytorch", 
              name: "PyTorch", 
              completed: false,
              courses: ["PyTorch for Deep Learning"]
            },
          ],
        },
        {
          id: "llm",
          name: "LLMs",
          completed: true,
          projects: ["Chatbots", "AI Assistants"],
          courses: ["LLM Bootcamp"],
          children: [
            { 
              id: "openai", 
              name: "OpenAI APIs", 
              completed: true,
              projects: ["Content Generator", "Code Assistant"],
              courses: ["OpenAI API Masterclass"]
            },
            { 
              id: "langchain", 
              name: "LangChain", 
              completed: true,
              projects: ["Document Q&A", "RAG System"],
              courses: ["LangChain Guide"]
            },
          ],
        },
      ],
    },
  },
  {
    id: "backend",
    name: "Backend",
    icon: Server,
    color: "from-green-500 to-emerald-500",
    tree: {
      id: "nodejs",
      name: "Node.js",
      completed: true,
      projects: ["REST APIs", "Microservices"],
      courses: ["Node.js Complete Guide"],
      children: [
        { 
          id: "express", 
          name: "Express", 
          completed: true,
          projects: ["API Server", "Auth Service"],
          courses: ["Express.js Tutorial"]
        },
        { 
          id: "nestjs", 
          name: "NestJS", 
          completed: false,
          courses: ["NestJS Zero to Hero"]
        },
        {
          id: "databases",
          name: "Databases",
          completed: true,
          projects: ["User Management", "Analytics DB"],
          courses: ["Database Design"],
          children: [
            { 
              id: "postgres", 
              name: "PostgreSQL", 
              completed: true,
              projects: ["Multi-tenant SaaS"],
              courses: ["PostgreSQL Bootcamp"]
            },
            { 
              id: "mongodb", 
              name: "MongoDB", 
              completed: true,
              projects: ["Social Media App"],
              courses: ["MongoDB University"]
            },
          ],
        },
      ],
    },
  },
  {
    id: "finance",
    name: "Finance",
    icon: TrendingUp,
    color: "from-yellow-500 to-orange-500",
    tree: {
      id: "fintech-basics",
      name: "Fintech Basics",
      completed: true,
      projects: ["Payment Gateway"],
      courses: ["Fintech Fundamentals"],
      children: [
        { 
          id: "payments", 
          name: "Payment APIs", 
          completed: true,
          projects: ["Stripe Integration", "PayPal Checkout"],
          courses: ["Payment Systems Course"]
        },
        { 
          id: "blockchain", 
          name: "Blockchain", 
          completed: false,
          courses: ["Blockchain Basics"]
        },
        {
          id: "trading",
          name: "Trading Systems",
          completed: false,
          courses: ["Algorithmic Trading"],
          children: [
            { 
              id: "algo-trading", 
              name: "Algo Trading", 
              completed: false,
              courses: ["Quantitative Trading"]
            },
            { 
              id: "risk-mgmt", 
              name: "Risk Management", 
              completed: false,
              courses: ["Financial Risk Analysis"]
            },
          ],
        },
      ],
    },
  },
];

const SkillNodeComponent = ({ 
  node, 
  level = 0,
  isEditing = false,
  onToggle,
  onEdit,
  onAddChild,
  onDelete
}: { 
  node: SkillNode; 
  level?: number;
  isEditing?: boolean;
  onToggle?: (nodeId: string) => void;
  onEdit?: (nodeId: string, newName: string) => void;
  onAddChild?: (nodeId: string) => void;
  onDelete?: (nodeId: string) => void;
}) => {
  const [isEditingName, setIsEditingName] = useState(false);
  const [editName, setEditName] = useState(node.name);

  const hasContent = (node.projects && node.projects.length > 0) || (node.courses && node.courses.length > 0);

  const handleSaveName = () => {
    if (onEdit && editName.trim()) {
      onEdit(node.id, editName.trim());
    }
    setIsEditingName(false);
  };

  const nodeContent = (
    <div className="relative group">
      {isEditing && (
        <div className="absolute -top-2 -right-2 z-10 flex gap-1">
          {!isEditingName ? (
            <>
              <button
                onClick={() => setIsEditingName(true)}
                className="p-1 rounded-full bg-primary text-primary-foreground hover:bg-primary/90 transition-colors opacity-0 group-hover:opacity-100"
              >
                <Edit2 className="w-3 h-3" />
              </button>
              {onDelete && level > 0 && (
                <button
                  onClick={() => onDelete(node.id)}
                  className="p-1 rounded-full bg-destructive text-destructive-foreground hover:bg-destructive/90 transition-colors opacity-0 group-hover:opacity-100"
                >
                  <X className="w-3 h-3" />
                </button>
              )}
            </>
          ) : (
            <button
              onClick={handleSaveName}
              className="p-1 rounded-full bg-green-500 text-white hover:bg-green-600 transition-colors"
            >
              <Check className="w-3 h-3" />
            </button>
          )}
        </div>
      )}
      
      {isEditingName ? (
        <Input
          value={editName}
          onChange={(e) => setEditName(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === "Enter") handleSaveName();
            if (e.key === "Escape") {
              setEditName(node.name);
              setIsEditingName(false);
            }
          }}
          className="w-32 h-8 text-sm"
          autoFocus
        />
      ) : (
        <div
          className={`px-4 py-2 rounded-lg border-2 transition-all cursor-pointer ${
            node.completed
              ? "bg-primary/10 border-primary text-primary font-medium"
              : "bg-muted border-muted-foreground/20 text-muted-foreground"
          }`}
          onClick={() => isEditing && onToggle && onToggle(node.id)}
        >
          {node.name}
        </div>
      )}
      
      {isEditing && onAddChild && (
        <button
          onClick={() => onAddChild(node.id)}
          className="absolute -bottom-6 left-1/2 -translate-x-1/2 p-1 rounded-full bg-primary text-primary-foreground hover:bg-primary/90 transition-colors opacity-0 group-hover:opacity-100"
        >
          <Plus className="w-3 h-3" />
        </button>
      )}
    </div>
  );

  return (
    <div className="flex flex-col items-center">
      <div className="relative">
        {hasContent && !isEditing ? (
          <HoverCard>
            <HoverCardTrigger asChild>
              {nodeContent}
            </HoverCardTrigger>
            <HoverCardContent className="w-64">
              <div className="space-y-3">
                <h4 className="font-semibold">{node.name}</h4>
                {node.projects && node.projects.length > 0 && (
                  <div>
                    <p className="text-xs font-medium text-muted-foreground mb-1">Projects:</p>
                    <div className="space-y-1">
                      {node.projects.map((project, idx) => (
                        <Badge key={idx} variant="secondary" className="text-xs mr-1">
                          {project}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
                {node.courses && node.courses.length > 0 && (
                  <div>
                    <p className="text-xs font-medium text-muted-foreground mb-1">Courses:</p>
                    <div className="space-y-1">
                      {node.courses.map((course, idx) => (
                        <Badge key={idx} variant="outline" className="text-xs mr-1">
                          {course}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </HoverCardContent>
          </HoverCard>
        ) : (
          nodeContent
        )}
        
        {node.children && node.children.length > 0 && (
          <>
            <div className="absolute top-full left-1/2 w-0.5 h-8 bg-border -translate-x-1/2" />
            <div className="relative flex gap-8 mt-8 justify-center">
              {node.children.length > 1 && (
                <svg 
                  className="absolute pointer-events-none" 
                  style={{ 
                    top: "-32px", 
                    left: "0", 
                    width: "100%", 
                    height: "32px",
                    overflow: "visible"
                  }}
                >
                  <line
                    x1="0"
                    y1="0"
                    x2="100%"
                    y2="0"
                    stroke="hsl(var(--border))"
                    strokeWidth="2"
                  />
                  {node.children.map((_, idx) => {
                    const totalWidth = 100;
                    const spacing = totalWidth / (node.children!.length + 1);
                    const xPos = `${spacing * (idx + 1)}%`;
                    return (
                      <line
                        key={idx}
                        x1={xPos}
                        y1="0"
                        x2={xPos}
                        y2="32"
                        stroke="hsl(var(--border))"
                        strokeWidth="2"
                      />
                    );
                  })}
                </svg>
              )}
              {node.children.map((child) => (
                <div key={child.id} className="flex flex-col items-center">
                  <SkillNodeComponent 
                    node={child} 
                    level={level + 1}
                    isEditing={isEditing}
                    onToggle={onToggle}
                    onEdit={onEdit}
                    onAddChild={onAddChild}
                    onDelete={onDelete}
                  />
                </div>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export const SkillTree = () => {
  const [categories, setCategories] = useState<SkillTreeCategory[]>(defaultCategories);
  const [selectedCategory, setSelectedCategory] = useState<string>(defaultCategories[0].id);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [newTreeName, setNewTreeName] = useState("");
  const [isEditMode, setIsEditMode] = useState(false);

  const activeCategory = categories.find((cat) => cat.id === selectedCategory);
  const canEdit = activeCategory?.isCustom;

  const handleCreateCustomTree = () => {
    if (!newTreeName.trim()) return;

    const newCategory: SkillTreeCategory = {
      id: `custom-${Date.now()}`,
      name: newTreeName,
      icon: Database,
      color: "from-indigo-500 to-purple-500",
      isCustom: true,
      tree: {
        id: "root",
        name: "Start Here",
        completed: false,
        children: [
          { id: "skill-1", name: "Skill 1", completed: false },
          { id: "skill-2", name: "Skill 2", completed: false },
        ],
      },
    };

    setCategories([...categories, newCategory]);
    setSelectedCategory(newCategory.id);
    setNewTreeName("");
    setIsDialogOpen(false);
  };

  const handleDeleteCustomTree = (categoryId: string) => {
    setCategories(categories.filter((cat) => cat.id !== categoryId));
    if (selectedCategory === categoryId) {
      setSelectedCategory(defaultCategories[0].id);
    }
  };

  const updateNodeInTree = (tree: SkillNode, nodeId: string, updater: (node: SkillNode) => SkillNode): SkillNode => {
    if (tree.id === nodeId) {
      return updater(tree);
    }
    if (tree.children) {
      return {
        ...tree,
        children: tree.children.map(child => updateNodeInTree(child, nodeId, updater))
      };
    }
    return tree;
  };

  const deleteNodeFromTree = (tree: SkillNode, nodeId: string): SkillNode => {
    if (tree.children) {
      return {
        ...tree,
        children: tree.children.filter(child => child.id !== nodeId).map(child => deleteNodeFromTree(child, nodeId))
      };
    }
    return tree;
  };

  const handleToggleNode = (nodeId: string) => {
    if (!activeCategory) return;
    const updatedTree = updateNodeInTree(activeCategory.tree, nodeId, (node) => ({
      ...node,
      completed: !node.completed
    }));
    setCategories(categories.map(cat => 
      cat.id === selectedCategory ? { ...cat, tree: updatedTree } : cat
    ));
  };

  const handleEditNode = (nodeId: string, newName: string) => {
    if (!activeCategory) return;
    const updatedTree = updateNodeInTree(activeCategory.tree, nodeId, (node) => ({
      ...node,
      name: newName
    }));
    setCategories(categories.map(cat => 
      cat.id === selectedCategory ? { ...cat, tree: updatedTree } : cat
    ));
  };

  const handleAddChild = (parentId: string) => {
    if (!activeCategory) return;
    const newChild: SkillNode = {
      id: `skill-${Date.now()}`,
      name: "New Skill",
      completed: false
    };
    const updatedTree = updateNodeInTree(activeCategory.tree, parentId, (node) => ({
      ...node,
      children: [...(node.children || []), newChild]
    }));
    setCategories(categories.map(cat => 
      cat.id === selectedCategory ? { ...cat, tree: updatedTree } : cat
    ));
  };

  const handleDeleteNode = (nodeId: string) => {
    if (!activeCategory) return;
    const updatedTree = deleteNodeFromTree(activeCategory.tree, nodeId);
    setCategories(categories.map(cat => 
      cat.id === selectedCategory ? { ...cat, tree: updatedTree } : cat
    ));
  };

  return (
    <div className="max-w-6xl mx-auto">
      <div className="flex items-center justify-between mb-8">
        <h2 className="text-3xl font-bold">Skill Trees</h2>
        <div className="flex gap-2">
          {canEdit && (
            <Button
              variant={isEditMode ? "default" : "outline"}
              onClick={() => setIsEditMode(!isEditMode)}
              className="gap-2"
            >
              <Edit2 className="w-4 h-4" />
              {isEditMode ? "Done Editing" : "Edit Tree"}
            </Button>
          )}
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogTrigger asChild>
            <Button className="gap-2">
              <Plus className="w-4 h-4" />
              Create Skill Tree
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create Your Skill Tree</DialogTitle>
            </DialogHeader>
            <div className="space-y-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="tree-name">Skill Tree Name</Label>
                <Input
                  id="tree-name"
                  placeholder="e.g., Game Development, DevOps"
                  value={newTreeName}
                  onChange={(e) => setNewTreeName(e.target.value)}
                  onKeyDown={(e) => e.key === "Enter" && handleCreateCustomTree()}
                />
              </div>
              <Button onClick={handleCreateCustomTree} className="w-full">
                Create Tree
              </Button>
            </div>
          </DialogContent>
          </Dialog>
        </div>
      </div>

      <div className="flex flex-wrap gap-2 mb-8">
        {categories.map((category) => {
          const Icon = category.icon;
          return (
            <div key={category.id} className="relative">
              <Button
                variant={selectedCategory === category.id ? "default" : "outline"}
                className="gap-2"
                onClick={() => setSelectedCategory(category.id)}
              >
                <Icon className="w-4 h-4" />
                {category.name}
              </Button>
              {category.isCustom && (
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleDeleteCustomTree(category.id);
                  }}
                  className="absolute -top-2 -right-2 p-1 rounded-full bg-destructive text-destructive-foreground hover:bg-destructive/90 transition-colors"
                >
                  <X className="w-3 h-3" />
                </button>
              )}
            </div>
          );
        })}
      </div>

      {activeCategory && (
        <Card className="p-8">
          <div className="flex items-center gap-3 mb-8">
            <div className={`p-3 rounded-xl bg-gradient-to-br ${activeCategory.color}`}>
              {<activeCategory.icon className="w-6 h-6 text-white" />}
            </div>
            <h3 className="text-2xl font-bold">{activeCategory.name}</h3>
          </div>

          <div className="overflow-x-auto pb-4">
            <div className="min-w-max flex justify-center">
              <SkillNodeComponent 
                node={activeCategory.tree}
                isEditing={isEditMode}
                onToggle={handleToggleNode}
                onEdit={handleEditNode}
                onAddChild={handleAddChild}
                onDelete={handleDeleteNode}
              />
            </div>
          </div>

          <div className="flex items-center gap-4 mt-8 pt-6 border-t border-border text-sm">
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded border-2 border-primary bg-primary/10" />
              <span className="text-muted-foreground">Completed</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 rounded border-2 border-muted-foreground/20 bg-muted" />
              <span className="text-muted-foreground">Not Started</span>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
};
